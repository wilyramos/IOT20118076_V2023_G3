#include <WiFi.h>
#include <PubSubClient.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>

const char* ssid = "wifi";
const char* password = "contrase";
const char* mqtt_server = "broker.emqx.io";

const int ledPin = 27;
int ledState = LOW;

// Sensor de metano
const int methanePin = 33;

// Sensor de humedad y temperatura
#define DHTPIN 32
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, ledState);

  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi...");
  }

  Serial.println("Conectado a la red WiFi");
  Serial.println("Dirección IP asignada: ");
  Serial.println(WiFi.localIP());

  client.setServer(mqtt_server, 1883);

  dht.begin();
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Controlar el LED desde Node-RED
  if (client.available()) {
    String topic = client.readStringUntil('/');
    String payload = client.readStringUntil('\n');

    if (topic == "casa/led") {
      if (payload == "on") {
        ledState = HIGH;
      } else if (payload == "off") {
        ledState = LOW;
      }
      digitalWrite(ledPin, ledState);
    }
  }

  // Leer los sensores y publicar los datos a través de MQTT
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  int methane = analogRead(methanePin);

  // Publicar los datos a través de MQTT
  char payload[100];
  snprintf(payload, sizeof(payload), "{\"humidity\": %f, \"temperature\": %f, \"methane\": %d}", humidity, temperature, methane);
  client.publish("casa/sensores", payload);
}

void reconnect() {
  while (!client.connected()) {
    Serial.println("Conectando a MQTT Broker...");
    if (client.connect("ESP32_Client")) {
      Serial.println("Conectado a MQTT Broker");
      client.subscribe("casa/led");
    } else {
      Serial.print("falló con error: ");
      Serial.println(client.state());
      delay(5000);
    }
  }
}
